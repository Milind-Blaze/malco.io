<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>releases | Malcolm Barrett</title>
    <link>/categories/releases/</link>
      <atom:link href="/categories/releases/index.xml" rel="self" type="application/rss+xml" />
    <description>releases</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019 Malcolm Barrett</copyright><lastBuildDate>Sun, 06 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>releases</title>
      <link>/categories/releases/</link>
    </image>
    
    <item>
      <title>Introducing ymlthis: a toolkit for working with YAML</title>
      <link>/2019/10/06/introducing-ymlthis/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/2019/10/06/introducing-ymlthis/</guid>
      <description>


&lt;p&gt;I’m pleased to announce that &lt;a href=&#34;http://ymlthis.r-lib.org&#34;&gt;ymlthis 0.1.0&lt;/a&gt; is now on CRAN! ymlthis is a toolkit to reduce the pain of working with YAML. The two most common issues when working with YAML are getting the syntax right, particularly the white space, and understanding what options you can specify. ymlthis solves these problems by building and documenting YAML from R. ymlthis supports many other R Markdown packages, such as blogdown, bookdown, and pkgdown, and also offers new ways of working with R Markdown and YAML files.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install from CRAN
install.packages(&amp;quot;ymlthis&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;write-yaml&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Write YAML&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;yml()&lt;/code&gt; is the basic building-block of ymlthis; by default, it adds your name and R code to write the date programatically.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ymlthis)
yml()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
author: Malcolm Barrett
date: &amp;#39;`r format(Sys.Date())`&amp;#39;
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ymlthis uses the pipe syntax to add more elements to the underlying YAML.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;yml() %&amp;gt;% 
  yml_output(bookdown::html_document2(toc = TRUE)) %&amp;gt;% 
  yml_title(&amp;quot;Introducing ymlthis&amp;quot;) %&amp;gt;% 
  yml_category(c(&amp;quot;r&amp;quot;, &amp;quot;rmarkdown&amp;quot;, &amp;quot;yaml&amp;quot;)) %&amp;gt;% 
  yml_citations(
    bibliography = &amp;quot;references.bib&amp;quot;, # file with citations
    csl = &amp;quot;aje.csl&amp;quot; # file with citation styles
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
author: Malcolm Barrett
date: &amp;#39;`r format(Sys.Date())`&amp;#39;
output:
  bookdown::html_document2:
    toc: true
title: Introducing ymlthis
category:
- r
- rmarkdown
- yaml
bibliography: references.bib
csl: aje.csl
---&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;write-r-markdown-and-yaml-files&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Write R Markdown and YAML files&lt;/h1&gt;
&lt;p&gt;ymlthis prints cleanly to the console, so you can easily copy and paste it into your R Markdown document (or use &lt;code&gt;use_yml()&lt;/code&gt; to programatically place it on your clipboard). However, this might not fit the needs of your workflow. &lt;code&gt;use_rmarkdown()&lt;/code&gt; and friends take &lt;code&gt;yml&lt;/code&gt; objects and write them to R Markdown files.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;use_rmarkdown(path = &amp;quot;myreport.Rmd&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ Writing &amp;#39;/var/folders/03/9x7925g54mncswxx06wpkxl00000gn/T/RtmpWdgusY/filed546cbbee51/myreport.Rmd&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Read the &lt;a href=&#34;http://ymlthis.r-lib.org/articles/introduction-to-ymlthis.html&#34;&gt;vignette introducing ymlthis&lt;/a&gt; for more on working with R Markdown and YAML files, as well as for using ymlthis to create R Markdown templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;learn-more-about-yaml-and-yaml-options&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Learn more about YAML and YAML options&lt;/h1&gt;
&lt;p&gt;Because these YAML fields are expressed as R function arguments, they are explicitly documented in &lt;code&gt;yml_*()&lt;/code&gt; functions. For instance, if you want to know the LaTeX options you can set while knitting to a PDF file, you can look at the help page for &lt;code&gt;?yml_latex_opts()&lt;/code&gt;. If you’re not quite sure where to look, all of the YAML fields documented in ymlthis are compiled in a single place in the &lt;a href=&#34;http://ymlthis.r-lib.org/articles/yaml-fieldguide.html&#34;&gt;YAML Fieldguide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ymlthis also has a &lt;a href=&#34;http://ymlthis.r-lib.org/articles/yaml-overview.html&#34;&gt;vignette introducing YAML in general&lt;/a&gt;, if you’d like to learn more about using it directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;where-do-i-learn-more-about-ymlthis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Where do I learn more about ymlthis?&lt;/h1&gt;
&lt;p&gt;Learn more about ymlthis on the &lt;a href=&#34;http://ymlthis.r-lib.org&#34;&gt;package website&lt;/a&gt;. There you’ll find articles on &lt;a href=&#34;http://ymlthis.r-lib.org/articles/introduction-to-ymlthis.html&#34;&gt;with a detailed introduction to ymlthis&lt;/a&gt;, &lt;a href=&#34;http://ymlthis.r-lib.org/articles/yaml-overview.html&#34;&gt;introducing YAML&lt;/a&gt;, and &lt;a href=&#34;http://ymlthis.r-lib.org/articles/yaml-fieldguide.html&#34;&gt;the YAML Fieldguide&lt;/a&gt;, which documents in one place all the YAML fields contained in ymlthis.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidy causal DAGs with ggdag 0.2.0</title>
      <link>/2019/09/17/tidy-causal-dags-with-ggdag-0-2-0/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/2019/09/17/tidy-causal-dags-with-ggdag-0-2-0/</guid>
      <description>


&lt;p&gt;I’m please to announce that &lt;a href=&#34;https://ggdag.malco.io/&#34;&gt;ggdag 0.2.0&lt;/a&gt; is now on CRAN! ggdag links the dagitty package, which contains powerful algorithms for analyzing causal DAGs, with the unlimited flexibility of ggplot2. ggdag coverts dagitty objects to a tidy DAG data structure, which allows you to both analyze your DAG and plot it easily in ggplot2. Let’s look at an example for a causal diagram of the effect of smoking on cardiac arrest.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggdag)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;smoking_ca_dag &amp;lt;- dagify(cardiacarrest ~ cholesterol,
       cholesterol ~ smoking + weight,
       smoking ~ unhealthy,
       weight ~ unhealthy,
       labels = c(&amp;quot;cardiacarrest&amp;quot; = &amp;quot;Cardiac\n Arrest&amp;quot;, 
                  &amp;quot;smoking&amp;quot; = &amp;quot;Smoking&amp;quot;,
                  &amp;quot;cholesterol&amp;quot; = &amp;quot;Cholesterol&amp;quot;,
                  &amp;quot;unhealthy&amp;quot; = &amp;quot;Unhealthy\n Lifestyle&amp;quot;,
                  &amp;quot;weight&amp;quot; = &amp;quot;Weight&amp;quot;),
       latent = &amp;quot;unhealthy&amp;quot;,
       exposure = &amp;quot;smoking&amp;quot;,
       outcome = &amp;quot;cardiacarrest&amp;quot;) %&amp;gt;% 
  tidy_dagitty()

smoking_ca_dag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A DAG with 5 nodes and 5 edges
## #
## # Exposure: smoking
## # Outcome: cardiacarrest
## # Latent Variable: unhealthy
## #
## # A tibble: 6 x 9
##   name          x     y direction to        xend  yend circular label      
##   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;    &amp;lt;chr&amp;gt;      
## 1 choleste…  13.2  11.8 -&amp;gt;        cardiac…  12.0  11.2 FALSE    Cholesterol
## 2 smoking    14.5  11.7 -&amp;gt;        cholest…  13.2  11.8 FALSE    Smoking    
## 3 unhealthy  15.0  12.8 -&amp;gt;        smoking   14.5  11.7 FALSE    &amp;quot;Unhealthy…
## 4 unhealthy  15.0  12.8 -&amp;gt;        weight    13.8  13.0 FALSE    &amp;quot;Unhealthy…
## 5 weight     13.8  13.0 -&amp;gt;        cholest…  13.2  11.8 FALSE    Weight     
## 6 cardiaca…  12.0  11.2 &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      NA    NA   FALSE    &amp;quot;Cardiac\n…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tidy DAG structure looks like a &lt;code&gt;tibble&lt;/code&gt;. ggdag 0.2.0 also prints some information about the DAG at the top.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggdag(smoking_ca_dag, text = FALSE, use_labels = &amp;quot;label&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-09-17-tidy-causal-dags-with-ggdag-0-2-0/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here, smoking does increase the risk of cardiac arrest, but it’s also confounded by an unmeasured variable, a tendency towards an unhealthy lifestyle. That means that there are two open paths from smoking to cardiac arrest: the causal path through cholesterol and the backdoor path through weight. (This DAG is probably not quite right, because smoking also affects weight, but we’ll leave it as is for demonstration purposes.)&lt;/p&gt;
&lt;p&gt;If you used ggdag 0.1.0, you may notice a big difference here: ggdag plots now look a lot more like base ggplot2 plots. While this has been the case in the development version for some time, one of the bigger mistakes in the initial release of ggdag was too much out-of-box customization. ggdag now does a much better job getting out of the way of ggplot2’s incredible system for aesthetics and themes. Let’s analyze the paths in the smoking DAG but take advantage of tools from ggplot2 to customize the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggdag_paths(smoking_ca_dag, text = FALSE, use_labels = &amp;quot;label&amp;quot;, shadow = TRUE) +
  theme_dag(base_size = 14) +
  theme(legend.position = &amp;quot;none&amp;quot;, strip.text = element_blank()) + 
  # set node aesthetics
  scale_color_manual(values = &amp;quot;#0072B2&amp;quot;, na.value = &amp;quot;grey80&amp;quot;) + 
  # set label aesthetics
  scale_fill_manual(values = &amp;quot;#0072B2&amp;quot;, na.value = &amp;quot;grey80&amp;quot;) + 
  # set arrow aesthetics
  ggraph::scale_edge_color_manual(values = &amp;quot;#0072B2&amp;quot;, na.value = &amp;quot;grey80&amp;quot;) +
  ggtitle(&amp;quot;Open paths from smoking to cardiac arrest&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-09-17-tidy-causal-dags-with-ggdag-0-2-0/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are also many new themes available, each of which is prefixed with &lt;code&gt;theme_dag*()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Learn more about ggdag on the &lt;a href=&#34;https://ggdag.malco.io/&#34;&gt;package website&lt;/a&gt;. There you’ll find articles on &lt;a href=&#34;https://ggdag.malco.io/articles/intro-to-ggdag.html&#34;&gt;introducing ggdag&lt;/a&gt;, &lt;a href=&#34;https://ggdag.malco.io/articles/intro-to-dags.html&#34;&gt;introducing DAGs&lt;/a&gt;, and discussing &lt;a href=&#34;https://ggdag.malco.io/articles/bias-structures.html&#34;&gt;common structures of bias&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;what-else-is-new&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What else is new?&lt;/h2&gt;
&lt;p&gt;This release ensures compatibility with ggraph 2.0.0 and also fixes a number of bugs (see the &lt;a href=&#34;https://ggdag.malco.io/news/index.html&#34;&gt;news&lt;/a&gt; section of the pkgdown site). In addition to better support for ggplot2 aesthetic functions, ggdag also now has better support for working directly in tidygraph/ggraph. ggraph is essential to ggdag’s geoms, but you might prefer to work with the full toolkit from that package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidygraph)
library(ggraph)
tblgraph_dag &amp;lt;- as_tbl_graph(smoking_ca_dag)

tblgraph_dag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tbl_graph: 5 nodes and 5 edges
## #
## # A directed acyclic simple graph with 1 component
## #
## # Node Data: 5 x 1 (active)
##   name         
##   &amp;lt;chr&amp;gt;        
## 1 cholesterol  
## 2 smoking      
## 3 unhealthy    
## 4 weight       
## 5 cardiacarrest
## #
## # Edge Data: 5 x 9
##    from    to     x     y direction  xend  yend circular label             
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;    &amp;lt;chr&amp;gt;             
## 1     1     5  13.2  11.8 -&amp;gt;         12.0  11.2 FALSE    Cholesterol       
## 2     2     1  14.5  11.7 -&amp;gt;         13.2  11.8 FALSE    Smoking           
## 3     3     2  15.0  12.8 -&amp;gt;         14.5  11.7 FALSE    &amp;quot;Unhealthy\n Life…
## # … with 2 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tblgraph_dag %&amp;gt;% 
  ggraph() +
  geom_node_text(aes(label = name)) + 
  geom_edge_link(aes(
    start_cap = label_rect(node1.name),
    end_cap = label_rect(node2.name)
  ), arrow = arrow()) +
  theme_graph()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-09-17-tidy-causal-dags-with-ggdag-0-2-0/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;tidygraph is designed to work with network data rather than causal diagrams, so many of the features are not as useful for causal DAGs as the algorithms from dagitty. However, tidygraph and ggraph have many tools for manipulating network-like data that are very powerful.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;miss-the-old-look&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Miss the old look?&lt;/h2&gt;
&lt;p&gt;A lot has changed in the look of ggdag, but the old style hasn’t gone away. You can set the old theme with &lt;code&gt;theme_dag_gray()&lt;/code&gt; and set the stylized nodes with &lt;code&gt;geom_dag_node()&lt;/code&gt; (instead of &lt;code&gt;geom_dag_point()&lt;/code&gt;) or with the &lt;code&gt;stylized&lt;/code&gt; argument in the quick plotting functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggdag(confounder_triangle(), stylized = TRUE) +
  theme_dag_gray()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-09-17-tidy-causal-dags-with-ggdag-0-2-0/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introducing the partition package</title>
      <link>/2019/05/20/introducing-the-partition-package/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      <guid>/2019/05/20/introducing-the-partition-package/</guid>
      <description>


&lt;p&gt;I’m pleased to announce the CRAN release of partition 0.1.0. partition is a fast and flexible data reduction framework that minimizes information loss and creates interpretable clusters. partition uses agglomorative clustering: it starts from the ground up, matching pairs of variables and assessing the amount of information that would be explained by their reduction. If the information is above this user-specified threshold, the data is reduced. This type of reduction is particularly useful in very redundant data, such as high-resolution genetic data.&lt;/p&gt;
&lt;div id=&#34;creating-partitions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Creating partitions&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;partition()&lt;/code&gt; takes a data frame and reduces it as much as possible without creating clusters below the minimum amount of information specified in the &lt;code&gt;threshold&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;partition&amp;quot;)
library(partition)
set.seed(1234)
#  simulate correlated data
df &amp;lt;- simulate_block_data(c(3, 4, 5), lower_corr = .4, upper_corr = .6, n = 100)

#  don&amp;#39;t accept reductions where information &amp;lt; .6
prt &amp;lt;- partition(df, threshold = .6)
prt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Partitioner:
##    Director: Minimum Distance (Pearson) 
##    Metric: Intraclass Correlation 
##    Reducer: Scaled Mean
## 
## Reduced Variables:
## 1 reduced variables created from 2 observed variables
## 
## Mappings:
## reduced_var_1 = {block2_x3, block2_x4}
## 
## Minimum information:
## 0.602&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;partition&lt;/code&gt; object returned by &lt;code&gt;partition()&lt;/code&gt; contains the reduced data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# return reduced data
partition_scores(prt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 100 x 11
##    block1_x1 block1_x2 block1_x3 block2_x1 block2_x2 block3_x1 block3_x2
##        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1   -1.00     -0.344      1.35     -0.526    -1.25      1.13     0.357 
##  2    0.518    -0.434     -0.361    -1.48     -1.53     -0.317    0.290 
##  3   -1.77     -0.913     -0.722     0.122     0.224    -0.529    0.114 
##  4   -1.49     -0.998      0.189     0.149    -0.994    -0.433    0.0120
##  5    0.616     0.0211     0.895     1.09     -1.25      0.440   -0.550 
##  6    0.0765    0.522      1.20     -0.152    -0.419    -0.912   -0.362 
##  7    1.74      0.0993    -0.654    -1.26     -0.502    -0.792   -1.03  
##  8    1.05      2.19       0.913     0.254     0.328    -1.07    -0.976 
##  9   -1.07     -0.292     -0.763     0.437     0.739     0.899   -0.342 
## 10   -1.02     -0.959     -1.33     -1.57     -1.11      0.618    0.153 
## # … with 90 more rows, and 4 more variables: block3_x3 &amp;lt;dbl&amp;gt;,
## #   block3_x4 &amp;lt;dbl&amp;gt;, block3_x5 &amp;lt;dbl&amp;gt;, reduced_var_1 &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also access the mappings of the original data to the clusters. Variables map to one and only one cluster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# access mapping keys
mapping_key(prt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 11 x 4
##    variable      mapping   information indices  
##    &amp;lt;chr&amp;gt;         &amp;lt;list&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;   
##  1 block1_x1     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
##  2 block1_x2     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
##  3 block1_x3     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
##  4 block2_x1     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
##  5 block2_x2     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
##  6 block3_x1     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
##  7 block3_x2     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
##  8 block3_x3     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
##  9 block3_x4     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
## 10 block3_x5     &amp;lt;chr [1]&amp;gt;       1     &amp;lt;int [1]&amp;gt;
## 11 reduced_var_1 &amp;lt;chr [2]&amp;gt;       0.602 &amp;lt;int [2]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unnest_mappings(prt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 4
##    variable      mapping   information indices
##    &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt;
##  1 block1_x1     block1_x1       1           1
##  2 block1_x2     block1_x2       1           2
##  3 block1_x3     block1_x3       1           3
##  4 block2_x1     block2_x1       1           4
##  5 block2_x2     block2_x2       1           5
##  6 block3_x1     block3_x1       1           8
##  7 block3_x2     block3_x2       1           9
##  8 block3_x3     block3_x3       1          10
##  9 block3_x4     block3_x4       1          11
## 10 block3_x5     block3_x5       1          12
## 11 reduced_var_1 block2_x3       0.602       6
## 12 reduced_var_1 block2_x4       0.602       7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-partitioners&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Using partitioners&lt;/h1&gt;
&lt;p&gt;partition uses an approach called Direct-Measure-Reduce to agglomerate the data: functions called partitioners tell the algorithm 1) where to look in the data 2) how to measure information loss and 3) how to reduce the data. The default partitioner that &lt;code&gt;partition()&lt;/code&gt; uses called &lt;code&gt;part_icc()&lt;/code&gt;, which 1) finds the closest pair of variables using a correlation-based distance matrix 2) measures information using intraclass correlation and 3) reduces acceptable clusters using scaled rowmeans.&lt;/p&gt;
&lt;p&gt;partition also has a number of other options. &lt;code&gt;part_kmeans()&lt;/code&gt;, for instance, uses the K-means algorithm to find potential reductions and reduces to the minimum level of &lt;code&gt;k&lt;/code&gt; that is still above the information threshold, measured by ICC.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# use a lower threshold of information loss
partition(df, threshold = .5, partitioner = part_kmeans())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Partitioner:
##    Director: K-Means Clusters 
##    Metric: Minimum Intraclass Correlation 
##    Reducer: Scaled Mean
## 
## Reduced Variables:
## 2 reduced variables created from 7 observed variables
## 
## Mappings:
## reduced_var_1 = {block3_x1, block3_x2, block3_x5}
## reduced_var_2 = {block2_x1, block2_x2, block2_x3, block2_x4}
## 
## Minimum information:
## 0.508&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the &lt;a href=&#34;https://uscbiostats.github.io/partition/articles/introduction-to-partition.html&#34;&gt;introductory vignette&lt;/a&gt; for more information on the built-in partitioners.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;partition()&lt;/code&gt; is actually agnostic to the Direct-Measure-Reduce approach used. This makes partition extremely flexible. You can edit existing partitioners or create completely new ones. For instance, if we want &lt;code&gt;part_icc()&lt;/code&gt; to return raw row means rather than scaled row means, we can replace the &lt;code&gt;reduce&lt;/code&gt; component of the function (here, with &lt;code&gt;rowmeans()&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# use a custom partitioner
part_icc_rowmeans &amp;lt;- replace_partitioner(
  part_icc, 
  reduce = as_reducer(rowMeans)
)
partition(df, threshold = .6, partitioner = part_icc_rowmeans) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Partitioner:
##    Director: Minimum Distance (Pearson) 
##    Metric: Intraclass Correlation 
##    Reducer: &amp;lt;custom reducer&amp;gt;
## 
## Reduced Variables:
## 1 reduced variables created from 2 observed variables
## 
## Mappings:
## reduced_var_1 = {block2_x3, block2_x4}
## 
## Minimum information:
## 0.602&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;partition()&lt;/code&gt; works seamlessly with changes to the partitioner. See the &lt;a href=&#34;https://uscbiostats.github.io/partition/articles/extending-partition.html&#34;&gt;vignette on extending partition&lt;/a&gt; for more information on customizing partitioners.&lt;/p&gt;
&lt;p&gt;partition also supports a number of ways to visualize partitions and permutation tests; these functions all start with &lt;code&gt;plot_*()&lt;/code&gt;. These functions all return ggplots and can thus be extended using ggplot2.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_stacked_area_clusters(df) +
  ggplot2::theme_minimal(14)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-20-introducing-the-partition-package/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;2240&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Install partition now from CRAN or install the &lt;a href=&#34;https://github.com/USCbiostats/partition&#34;&gt;development version on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;learn-more&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Learn More&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uscbiostats.github.io/partition/articles/introduction-to-partition.html&#34;&gt;Vignette: Introduction to partition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uscbiostats.github.io/partition/articles/extending-partition.html&#34;&gt;Vignette: Extending partition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uscbiostats.github.io/partition/&#34;&gt;partition web site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/USCbiostats/partition&#34;&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggdag 0.1.0</title>
      <link>/2018/03/28/ggdag-0.1.0/</link>
      <pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
      <guid>/2018/03/28/ggdag-0.1.0/</guid>
      <description>


&lt;p&gt;I’m pleased to announce the release of &lt;code&gt;ggdag&lt;/code&gt; 0.1.0 on CRAN! &lt;code&gt;ggdag&lt;/code&gt; uses the powerful &lt;code&gt;dagitty&lt;/code&gt; package to create and analyze structural causal models and plot them using &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;ggraph&lt;/code&gt; in a tidy, consistent, and easy manner. You can use &lt;code&gt;dagitty&lt;/code&gt; objects directly in &lt;code&gt;ggdag&lt;/code&gt;, but &lt;code&gt;ggdag&lt;/code&gt; also includes wrappers to make DAGs using a more R-like syntax:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;ggdag&amp;quot;)
library(ggdag)

dag &amp;lt;- dagify(y ~ x + z,
       x ~ z) %&amp;gt;% 
  tidy_dagitty()

dag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A DAG with 3 nodes and 3 edges
## #
## # A tibble: 4 x 8
##   name      x     y direction to     xend  yend circular
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;   
## 1 x      8.21  7.43 -&amp;gt;        y      7.57  8.19 FALSE   
## 2 z      8.55  8.37 -&amp;gt;        x      8.21  7.43 FALSE   
## 3 z      8.55  8.37 -&amp;gt;        y      7.57  8.19 FALSE   
## 4 y      7.57  8.19 &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;  NA    NA    FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggdag(dag)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-28-ggdag-0-1-0/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can learn more about it on the &lt;a href=&#34;https://ggdag.netlify.com/&#34;&gt;ggdag website&lt;/a&gt;, a &lt;code&gt;pkgdown&lt;/code&gt; site that includes rendered documentation and the following vignettes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ggdag.netlify.com/articles/intro-to-ggdag.html&#34;&gt;An Introduction to ggdag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggdag.netlify.com/articles/intro-to-dags.html&#34;&gt;An Introduction to Directed Acyclic Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggdag.netlify.com/articles/bias-structures.html&#34;&gt;Common Structures of Bias&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Give it a try, and please file an bugs or suggestions to the &lt;a href=&#34;https://github.com/malcolmbarrett/ggdag&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also want to thank a few of my fellow USC PhDs, David Bogumil, Ugonna Ihenacho, and Zhi Yang, for helping me polish the articles and offering helpful suggestions on some of the aesthetic details of &lt;code&gt;ggdag&lt;/code&gt;. Thanks, y’all!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
